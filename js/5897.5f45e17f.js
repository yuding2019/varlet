(self.webpackChunk_varlet_ui=self.webpackChunk_varlet_ui||[]).push([[5897],{5897:(s,a,n)=>{"use strict";n.r(a),n.d(a,{default:()=>r});var l=n(7875),e={class:"varlet-site-doc"},p=(0,l.uE)('<h1>按需引入</h1><div class="card"><h3>介绍</h3><p>按需引入避免了组件的全量导入，可以有效的减少发布包的大小。</p></div><div class="card"><h3>引入方式</h3><pre class="hljs"><code><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/styles/color-brewer.min.css"><span class="hljs-keyword">import</span> { createApp } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n<span class="hljs-keyword">import</span> { Button } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;@varlet/ui&#39;</span>\n<span class="hljs-keyword">import</span> <span class="hljs-string">&#39;@varlet/ui/es/button/style/index.js&#39;</span>\n\ncreateApp().use(Button)\n</code></pre><p>但是这样的引入方式是相对繁琐的， 接下来推荐基于<code>Webpack</code>和<code>Vite</code>两种构建工具的最佳实践。</p></div><div class="card"><h3>Webpack</h3><pre class="hljs"><code><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/styles/color-brewer.min.css"><span class="hljs-meta">#</span><span class="bash"> 安装插件</span>\n<span class="hljs-meta">#</span><span class="bash"> npm</span>\nnpm i babel-plugin-import -D \n<span class="hljs-meta">#</span><span class="bash"> yarn</span>\nyarn add babel-plugin-import -D\n</code></pre><pre class="hljs"><code><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/styles/color-brewer.min.css"><span class="hljs-comment">// babel.config.js</span>\n<span class="hljs-built_in">module</span>.exports = {\n  <span class="hljs-attr">plugins</span>: [\n    [\n      <span class="hljs-string">&#39;import&#39;</span>,\n      {\n        <span class="hljs-attr">libraryName</span>: <span class="hljs-string">&#39;@varlet/ui&#39;</span>,\n        <span class="hljs-attr">libraryDirectory</span>: <span class="hljs-string">&#39;es&#39;</span>,\n        <span class="hljs-attr">style</span>: <span class="hljs-literal">true</span>,\n      },\n      <span class="hljs-string">&#39;@varlet/ui&#39;</span>,\n    ],\n  ],\n};\n</code></pre><p>完成配置之后，在引入组件时插件会自动加载组件所需的样式文件，使用方式如下。</p><pre class="hljs"><code><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/styles/color-brewer.min.css"><span class="hljs-keyword">import</span> { createApp } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n<span class="hljs-keyword">import</span> { Button } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;@varlet/ui&#39;</span>\n\ncreateApp().use(Button)\n</code></pre></div><div class="card"><h3>Vite</h3><pre class="hljs"><code><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/styles/color-brewer.min.css"><span class="hljs-meta">#</span><span class="bash"> 安装插件</span>\n<span class="hljs-meta">#</span><span class="bash"> npm</span>\nnpm i vite-plugin-components -D\n<span class="hljs-meta">#</span><span class="bash"> yarn</span>\nyarn add i vite-plugin-components -D\n</code></pre><pre class="hljs"><code><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/styles/color-brewer.min.css"><span class="hljs-comment">// vite.config.js</span>\n<span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;@vitejs/plugin-vue&#39;</span>\n<span class="hljs-keyword">import</span> ViteComponents, { VarletUIResolver } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vite-plugin-components&#39;</span>\n<span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vite&#39;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineConfig({\n  <span class="hljs-attr">plugins</span>: [\n    vue(),\n    ViteComponents({\n      <span class="hljs-attr">globalComponentsDeclaration</span>: <span class="hljs-literal">true</span>,\n      <span class="hljs-attr">customComponentResolvers</span>: [VarletUIResolver()]\n    })\n  ]\n})\n</code></pre><p>完成配置之后，所有声明在模板里的组件，无须注册组件，插件会自动引入组件样式和注册组件。</p><pre class="hljs"><code><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/styles/color-brewer.min.css"><span class="hljs-tag">&lt;<span class="hljs-name">var-button</span>&gt;</span>默认按钮<span class="hljs-tag">&lt;/<span class="hljs-name">var-button</span>&gt;</span>\n</code></pre><p>注意函数组件，需要手动引入样式，如<code>Dialog</code>。</p><pre class="hljs"><code><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/styles/color-brewer.min.css"><span class="hljs-keyword">import</span> { Dialog } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;@varlet/ui&#39;</span>\n<span class="hljs-keyword">import</span> <span class="hljs-string">&#39;@varlet/ui/es/dialog/style/index.js&#39;</span>\n\nDialog(<span class="hljs-string">&#39;Varlet UI UP UP&#39;</span>)\n</code></pre><p>自定义指令，需要手动注册，如<code>Ripple</code></p><pre class="hljs"><code><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/styles/color-brewer.min.css"><span class="hljs-keyword">import</span> { createApp } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n<span class="hljs-keyword">import</span> { Ripple } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;@varlet/ui&#39;</span>\n\ncreateApp().use(Ripple)\n</code></pre></div>',5);const r={render:function(s,a){return(0,l.wg)(),(0,l.j4)("div",e,[p])}}}}]);