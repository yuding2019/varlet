(self.webpackChunk_varlet_ui=self.webpackChunk_varlet_ui||[]).push([[7326],{7326:(s,a,n)=>{"use strict";n.r(a),n.d(a,{default:()=>t});var e=n(7875),l={class:"varlet-site-doc"},p=(0,e.uE)('<h1>Import On Demand</h1><div class="card"><h3>Intro</h3><p>The on-demand import avoids the full import of components and can effectively reduce the size of the distribution package.</p></div><div class="card"><h3>Install method</h3><pre class="hljs"><code><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/styles/color-brewer.min.css"><span class="hljs-keyword">import</span> { createApp } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n<span class="hljs-keyword">import</span> { Button } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;@varlet/ui&#39;</span>\n<span class="hljs-keyword">import</span> <span class="hljs-string">&#39;@varlet/ui/es/button/style/index.js&#39;</span>\n\ncreateApp().use(Button)\n</code></pre><p>The logical part and style part of the component are installed as above, but this setup is relatively tedious Best practices based on <code>Webpack</code> and <code>Vite</code> build tools are recommended here</p></div><div class="card"><h3>Webpack</h3><pre class="hljs"><code><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/styles/color-brewer.min.css"><span class="hljs-meta">#</span><span class="bash"> Install plugin</span>\n<span class="hljs-meta">#</span><span class="bash"> npm</span>\nnpm i babel-plugin-import -D \n<span class="hljs-meta">#</span><span class="bash"> yarn</span>\nyarn add babel-plugin-import -D\n</code></pre><pre class="hljs"><code><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/styles/color-brewer.min.css"><span class="hljs-comment">// babel.config.js</span>\n<span class="hljs-built_in">module</span>.exports = {\n  <span class="hljs-attr">plugins</span>: [\n    [\n      <span class="hljs-string">&#39;import&#39;</span>,\n      {\n        <span class="hljs-attr">libraryName</span>: <span class="hljs-string">&#39;@varlet/ui&#39;</span>,\n        <span class="hljs-attr">libraryDirectory</span>: <span class="hljs-string">&#39;es&#39;</span>,\n        <span class="hljs-attr">style</span>: <span class="hljs-literal">true</span>,\n      },\n      <span class="hljs-string">&#39;@varlet/ui&#39;</span>,\n    ],\n  ],\n};\n</code></pre><p>After the configuration is complete, the plugin automatically loads the style files required for the component when it is introduced, using the following method</p><pre class="hljs"><code><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/styles/color-brewer.min.css"><span class="hljs-keyword">import</span> { createApp } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n<span class="hljs-keyword">import</span> { Button } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;@varlet/ui&#39;</span>\n\ncreateApp().use(Button)\n</code></pre></div><div class="card"><h3>Vite</h3><pre class="hljs"><code><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/styles/color-brewer.min.css"><span class="hljs-meta">#</span><span class="bash"> Install plugin</span>\n<span class="hljs-meta">#</span><span class="bash"> npm</span>\nnpm i vite-plugin-components -D\n<span class="hljs-meta">#</span><span class="bash"> yarn</span>\nyarn add i vite-plugin-components -D\n</code></pre><pre class="hljs"><code><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/styles/color-brewer.min.css"><span class="hljs-comment">// vite.config.js</span>\n<span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;@vitejs/plugin-vue&#39;</span>\n<span class="hljs-keyword">import</span> ViteComponents, { VarletUIResolver } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vite-plugin-components&#39;</span>\n<span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vite&#39;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineConfig({\n  <span class="hljs-attr">plugins</span>: [\n    vue(),\n    ViteComponents({\n      <span class="hljs-attr">globalComponentsDeclaration</span>: <span class="hljs-literal">true</span>,\n      <span class="hljs-attr">customComponentResolvers</span>: [VarletUIResolver()]\n    })\n  ]\n})\n</code></pre><p>After the configuration is completed, all components declared in the template do not need to be registered. The plug-in will automatically introduce component styles and registered components.</p><pre class="hljs"><code><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/styles/color-brewer.min.css"><span class="hljs-tag">&lt;<span class="hljs-name">var-button</span>&gt;</span>Default Button<span class="hljs-tag">&lt;/<span class="hljs-name">var-button</span>&gt;</span>\n</code></pre><p>Note that for functional components, you need to manually introduce styles, such as <code>Dialog</code>.</p><pre class="hljs"><code><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/styles/color-brewer.min.css"><span class="hljs-keyword">import</span> { Dialog } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;@varlet/ui&#39;</span>\n<span class="hljs-keyword">import</span> <span class="hljs-string">&#39;@varlet/ui/es/dialog/style/index.js&#39;</span>\n\nDialog(<span class="hljs-string">&#39;Varlet UI UP UP&#39;</span>)\n</code></pre><p>Note that for directives, need to be manually registered, such as <code>Ripple</code>.</p><pre class="hljs"><code><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.3.2/styles/color-brewer.min.css"><span class="hljs-keyword">import</span> { createApp } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n<span class="hljs-keyword">import</span> { Ripple } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;@varlet/ui&#39;</span>\n\ncreateApp().use(Ripple)\n</code></pre></div>',5);const t={render:function(s,a){return(0,e.wg)(),(0,e.j4)("div",l,[p])}}}}]);